// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DAL.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Date");

                    b.Property<int>("TurnCount");

                    b.Property<string>("Winner");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DAL.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FromPlayerId");

                    b.Property<int?>("GameId");

                    b.Property<int>("MoveResult");

                    b.Property<int?>("ToPlayerId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("FromPlayerId");

                    b.HasIndex("GameId");

                    b.HasIndex("ToPlayerId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("DAL.MovesAgainstPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PlayerId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MovesAgainstPlayers");
                });

            modelBuilder.Entity("DAL.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GameId");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DAL.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameId");

                    b.Property<int>("RuleType");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("DAL.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Direction")
                        .HasMaxLength(1);

                    b.Property<int?>("PlayerId");

                    b.Property<int>("Size");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasMaxLength(1);

                    b.Property<string>("Title")
                        .HasMaxLength(32);

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("DAL.ShipStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Offset");

                    b.Property<int?>("ShipId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipStatuses");
                });

            modelBuilder.Entity("DAL.Move", b =>
                {
                    b.HasOne("DAL.Player", "FromPlayer")
                        .WithMany()
                        .HasForeignKey("FromPlayerId");

                    b.HasOne("DAL.Game", "Game")
                        .WithMany("Moves")
                        .HasForeignKey("GameId");

                    b.HasOne("DAL.Player", "ToPlayer")
                        .WithMany()
                        .HasForeignKey("ToPlayerId");
                });

            modelBuilder.Entity("DAL.MovesAgainstPlayer", b =>
                {
                    b.HasOne("DAL.Player", "Player")
                        .WithMany("MovesAgainstThisPlayer")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("DAL.Player", b =>
                {
                    b.HasOne("DAL.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("DAL.Rule", b =>
                {
                    b.HasOne("DAL.Game", "Game")
                        .WithMany("Rules")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Ship", b =>
                {
                    b.HasOne("DAL.Player", "Player")
                        .WithMany("Ships")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("DAL.ShipStatus", b =>
                {
                    b.HasOne("DAL.Ship", "Ship")
                        .WithMany("ShipStatuses")
                        .HasForeignKey("ShipId");
                });
#pragma warning restore 612, 618
        }
    }
}
